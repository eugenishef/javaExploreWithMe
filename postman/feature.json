{
  "info": {
    "_postman_id": "2151a158-633d-4fa8-acce-058f065b3472",
    "name": "Test explore With Me - feature comments",
    "description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "49952859"
  },
  "item": [
    {
      "name": "Создать корректный комментарий",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, userId, annotation, eventId, created, text\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('userId');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('text');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать запросу');",
              "    pm.expect(target.userId).equal(pm.collectionVariables.get('uid'), 'Id пользователя должен соответствовать запросу');",
              "    pm.expect(target.eventId).equal(pm.collectionVariables.get('eid'), 'Id события должен соответствовать запросу');",
              "    pm.expect(target.created).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        comment = rnd.getComment();",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "",
              "    pm.request.body.update({",
              "        mode: 'raw',",
              "        raw: JSON.stringify(comment),",
              "        options: { raw: { language: 'json' } }",
              "    });",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Обновить корректный комментарий",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, userId, annotation, eventId, created, text\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('userId');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('text');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать запросу');",
              "    pm.expect(target.userId).equal(pm.collectionVariables.get('uid'), 'Id пользователя должен соответствовать запросу');",
              "    pm.expect(target.eventId).equal(pm.collectionVariables.get('eid'), 'Id события должен соответствовать запросу');",
              "    pm.expect(target.created).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        updateComment = rnd.getComment();",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "",
              "    pm.request.body.update({",
              "        mode: 'raw',",
              "        raw: JSON.stringify(updateComment),",
              "        options: { raw: { language: 'json' } }",
              "    });",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Получить по id комментарий",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, userId, annotation, eventId, created, text\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('userId');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('text');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.text).equal(pm.collectionVariables.get('source').text, 'Текст комментария должен соответствовать запросу');",
              "    pm.expect(target.userId).equal(pm.collectionVariables.get('uid'), 'Id пользователя должен соответствовать запросу');",
              "    pm.expect(target.eventId).equal(pm.collectionVariables.get('eid'), 'Id события должен соответствовать запросу');",
              "    pm.expect(target.created).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('source', comment);",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Получить комментарии по id события без параметров",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json()[0];",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, userId, annotation, eventId, created, text\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('userId');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('text');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.text).equal(pm.collectionVariables.get('source').text, 'Текст комментария должен соответствовать запросу');",
              "    pm.expect(target.userId).equal(pm.collectionVariables.get('uid'), 'Id пользователя должен соответствовать запросу');",
              "    pm.expect(target.eventId).equal(pm.collectionVariables.get('eid'), 'Id события должен соответствовать запросу');",
              "    pm.expect(target.created).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const anotherEvent = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "        const commentAnnotherEvent = await api.addComment(user.id, anotherEvent.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('source', comment);",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/events/:eventId/comments",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Получить комментарии по id события c параметрами",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json()[0];",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, userId, annotation, eventId, created, text\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('userId');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('text');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(target.text).equal(pm.collectionVariables.get('source').text, 'Текст комментария должен соответствовать запросу');",
              "    pm.expect(target.userId).equal(pm.collectionVariables.get('uid'), 'Id пользователя должен соответствовать запросу');",
              "    pm.expect(target.eventId).equal(pm.collectionVariables.get('eid'), 'Id события должен соответствовать запросу');",
              "    pm.expect(target.created).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const commentFirst = await api.addComment(user.id, event.id, rnd.getComment());",
              "        const commentSecond = await api.addComment(user.id, event.id, rnd.getComment());",
              "        const commentThird = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('source', commentThird);",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/events/:eventId/comments?from=1&size=2",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "events",
            ":eventId",
            "comments"
          ],
          "query": [
            {
              "key": "from",
              "value": "1"
            },
            {
              "key": "size",
              "value": "2"
            }
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Удалить корректный комментарий",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);  ",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Admin Удалить корректный комментарий",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);  ",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/admin/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Удалить не существующий комментарий NotFound",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', 999999);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Admin Удалить не существующий комментарий NotFound",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', 999999);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/admin/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Удалить не свой комментарий Conflict",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
              "    pm.response.to.have.status(409);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "        const wrongUser = await api.addUser(rnd.getUser());",
              "",
              "        pm.collectionVariables.set('uid', wrongUser.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Обновить комментарий без текста BadRequest",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        updateComment = rnd.getComment();",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Обновить не свой комментарий Conflict",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
              "    pm.response.to.have.status(409);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
              "",
              "        const wrongUser = await api.addUser(rnd.getUser());",
              "",
              "        updateComment = rnd.getComment();",
              "",
              "        pm.collectionVariables.set('uid', wrongUser.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "        pm.collectionVariables.set('cid', comment.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "",
              "    pm.request.body.update({",
              "        mode: 'raw',",
              "        raw: JSON.stringify(updateComment),",
              "        options: { raw: { language: 'json' } }",
              "    });",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments/:commentId",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            },
            {
              "key": "commentId",
              "value": "{{cid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Создать комментарий без текста Badrequest",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);  ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {",
              "    const api = new API(pm);",
              "    const rnd = new RandomUtils();",
              "",
              "    let comment;",
              "    try {",
              "        const user = await api.addUser(rnd.getUser());",
              "        const category = await api.addCategory(rnd.getCategory());",
              "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
              "        comment = rnd.getComment();",
              "",
              "        pm.collectionVariables.set('uid', user.id);",
              "        pm.collectionVariables.set('eid', event.id);",
              "    } catch(err) {",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
              "    }",
              "};",
              "",
              "const interval = setInterval(() => {}, 1000);",
              "",
              "setTimeout(async () => ",
              "    {",
              "        try {",
              "            await main();",
              "        } catch (e) {",
              "            console.error(e);",
              "        } finally {",
              "            clearInterval(interval);",
              "        }",
              "    },  ",
              "    100 ",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{base_url}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0){",
          "                        reject(new Error('Отправлено пустое тело ответа'))",
          "                    }else{",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "                ",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getComment() {",
          "        return {",
          "            text: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50)",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080"
    },
    {
      "key": "uid",
      "value": ""
    },
    {
      "key": "eid",
      "value": ""
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "cid",
      "value": ""
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}